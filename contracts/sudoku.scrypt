import "util.scrypt";
contract Sudoku {

    bytes board;

    static int N = 9;
    static bytes EMPTY = b'00';

    constructor(bytes board) {
        this.board = board;
    }

    function formatCheck(bytes solution) : bool {
        require(len(solution) == Sudoku.N * Sudoku.N);
        return true;
    }

    function merge(bytes solution) : bytes {

        bytes newBoard = this.board;
        int i = 0;
        // N - 2
        loop (9) {
            int j = 0;
            loop (9) {

                bytes value = Util.getElemAt(newBoard, this.index(i, j));

                if (value == Sudoku.EMPTY) {
                    bytes inputValue = Util.getElemAt(solution, this.index(i, j));

                    int elem = Util.fromLEUnsigned(inputValue);

                    require(elem <= 9);

                    newBoard = Util.setElemAt(newBoard, this.index(i, j), inputValue);
                }

                j = j + 1;
            }

            i = i + 1;
        }
        return newBoard;
    }







    public function isValidSudoku(bytes solution) {

        require(this.formatCheck(solution));

        bytes newBord = this.merge(solution);

        int i = 0;
        
        loop (9) {
            int j = 0;
            int rowSum = 0;
            int colSum = 0;
            int squareSum = 0;

            loop (9) {

    
                int rowElem = Util.fromLEUnsigned(Util.getElemAt(newBord, this.index(i, j)));
                rowSum = rowSum + rowElem;

                int colElem = Util.fromLEUnsigned(Util.getElemAt(newBord, this.index(j, i)));
                colSum = colSum + colElem;
                int squareElem = Util.fromLEUnsigned(Util.getElemAt(newBord, this.indexSquare(i, j)));
                squareSum = squareSum + squareElem;

                j = j + 1;
            }

            require(rowSum == 45);
            require(colSum == 45);
            require(squareSum == 45);
            i = i + 1;
        }


        require(true);
    }

    function index(int row, int col) : int {
        return row * Sudoku.N + col;
    }

    function indexSquare(int i, int j) : int {
        int row = i / 3 * 3 + j / 3;
        int col = i % 3 * 3 + j % 3;
        return this.index(row, col);
    }
}















